// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// getSubscriptNum
std::string getSubscriptNum(std::string str);
RcppExport SEXP _ms2Spectrum_getSubscriptNum(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(getSubscriptNum(str));
    return rcpp_result_gen;
END_RCPP
}
// makeIonLabels
StringVector makeIonLabels(std::string letter, int count, char dir);
RcppExport SEXP _ms2Spectrum_makeIonLabels(SEXP letterSEXP, SEXP countSEXP, SEXP dirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type letter(letterSEXP);
    Rcpp::traits::input_parameter< int >::type count(countSEXP);
    Rcpp::traits::input_parameter< char >::type dir(dirSEXP);
    rcpp_result_gen = Rcpp::wrap(makeIonLabels(letter, count, dir));
    return rcpp_result_gen;
END_RCPP
}
// makeIonLabelsExp
StringVector makeIonLabelsExp(std::string letter, int count, char dir);
RcppExport SEXP _ms2Spectrum_makeIonLabelsExp(SEXP letterSEXP, SEXP countSEXP, SEXP dirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type letter(letterSEXP);
    Rcpp::traits::input_parameter< int >::type count(countSEXP);
    Rcpp::traits::input_parameter< char >::type dir(dirSEXP);
    rcpp_result_gen = Rcpp::wrap(makeIonLabelsExp(letter, count, dir));
    return rcpp_result_gen;
END_RCPP
}
// makeSeqVec
StringVector makeSeqVec(std::string seq, bool fixDiffMods);
RcppExport SEXP _ms2Spectrum_makeSeqVec(SEXP seqSEXP, SEXP fixDiffModsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< bool >::type fixDiffMods(fixDiffModsSEXP);
    rcpp_result_gen = Rcpp::wrap(makeSeqVec(seq, fixDiffMods));
    return rcpp_result_gen;
END_RCPP
}
// isArg
bool isArg(std::string arg);
RcppExport SEXP _ms2Spectrum_isArg(SEXP argSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type arg(argSEXP);
    rcpp_result_gen = Rcpp::wrap(isArg(arg));
    return rcpp_result_gen;
END_RCPP
}
// fixOD
std::string fixOD(std::string str);
RcppExport SEXP _ms2Spectrum_fixOD(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(fixOD(str));
    return rcpp_result_gen;
END_RCPP
}
// getFoundIons
Rcpp::CharacterVector getFoundIons(Rcpp::CharacterVector ionTypes, Rcpp::CharacterVector ionNums);
RcppExport SEXP _ms2Spectrum_getFoundIons(SEXP ionTypesSEXP, SEXP ionNumsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type ionTypes(ionTypesSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type ionNums(ionNumsSEXP);
    rcpp_result_gen = Rcpp::wrap(getFoundIons(ionTypes, ionNums));
    return rcpp_result_gen;
END_RCPP
}
// getSpectrum
Rcpp::List getSpectrum(std::string fname);
RcppExport SEXP _ms2Spectrum_getSpectrum(SEXP fnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type fname(fnameSEXP);
    rcpp_result_gen = Rcpp::wrap(getSpectrum(fname));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ms2Spectrum_getSubscriptNum", (DL_FUNC) &_ms2Spectrum_getSubscriptNum, 1},
    {"_ms2Spectrum_makeIonLabels", (DL_FUNC) &_ms2Spectrum_makeIonLabels, 3},
    {"_ms2Spectrum_makeIonLabelsExp", (DL_FUNC) &_ms2Spectrum_makeIonLabelsExp, 3},
    {"_ms2Spectrum_makeSeqVec", (DL_FUNC) &_ms2Spectrum_makeSeqVec, 2},
    {"_ms2Spectrum_isArg", (DL_FUNC) &_ms2Spectrum_isArg, 1},
    {"_ms2Spectrum_fixOD", (DL_FUNC) &_ms2Spectrum_fixOD, 1},
    {"_ms2Spectrum_getFoundIons", (DL_FUNC) &_ms2Spectrum_getFoundIons, 2},
    {"_ms2Spectrum_getSpectrum", (DL_FUNC) &_ms2Spectrum_getSpectrum, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_ms2Spectrum(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
